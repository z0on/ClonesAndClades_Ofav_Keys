O.faveolata genome reference (from Carlos Prada, pradac@si.edu, http://www.carlosprada.org):
https://www.ncbi.nlm.nih.gov/Traces/wgs/?val=MZGG01#contigs
ftp://ftp.ncbi.nlm.nih.gov/sra/wgs_aux/MZ/GG/MZGG01/MZGG01.1.fsa_nt.gz

annotation :
https://www.ncbi.nlm.nih.gov/genome/annotation_euk/Orbicella_faveolata/100/
 You can download the annotation from:
ftp://ftp.ncbi.nih.gov/genomes/Orbicella_faveolata
(see the GFF directory in particular)

# -------- installing 2bRAD scripts (assuming scripts live in ~/bin) :
cd ~/bin 
# cloning github repositories
git clone https://github.com/z0on/2bRAD_denovo.git
mv 2bRAD_denovo/* . 
rm -rf 2bRAD_denovo

# ------- insatlling ANGSD (this may be outdated beyond 2018, refer to https://github.com/ANGSD/angsd ): 

# install xz first from https://tukaani.org/xz/

cd
wget https://tukaani.org/xz/xz-5.2.4.tar.gz --no-check-certificate
tar vxf xz-5.2.4.tar.gz 
cd xz-5.2.4/
./configure --prefix=$HOME/xz-5.2.4/
make
make install

# edit .bashrc:
cd
nano .bashrc
   export LD_LIBRARY_PATH=$HOME/xz-5.2.4/lib:$LD_LIBRARY_PATH
   export LIBRARY_PATH=$HOME/xz-5.2.4/lib:$LIBRARY_PATH
   export C_INCLUDE_PATH=$HOME/xz-5.2.4/include:$C_INCLUDE_PATH
logout
# re-login

# now, install htslib:
cd
git clone https://github.com/samtools/htslib.git
cd htslib
make CFLAGS=" -g -Wall -O2 -D_GNU_SOURCE -I$HOME/xz-5.2.4/include"

# install ANGSD
cd
git clone https://github.com/ANGSD/angsd.git 
cd angsd
make HTSSRC=../htslib

# now adding ANGSD to $PATH
cd
nano .bashrc
   export PATH=$HOME/angsd:$PATH
   export PATH=$HOME/angsd/misc:$PATH
# save (Ctl-O, Ctl-X)

# ----------------------- downloding reads from NCBI SRA

# the repo contains SRR_Acc_List.txt file, listing all individual accessions.
# to get reads from NCBI SRA database, first install sra-toolkit: https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software 

prefetch --option-file SRR_Acc_List.txt
for S in `cat SRR_Acc_List.txt`; do fasterq-dump $S; done

# this will generate fastq files with their NCBI SRR* names. Correspondence of these names with sample names in the original study are in manzello_sraRun2sample.csv

# the files contain trimmed and filtered 2bRAD reads, ready for mapping.

#-------------------

# setting up Orbicella faveolata genome

wget ftp://ftp.ncbi.nlm.nih.gov/sra/wgs_aux/MZ/GG/MZGG01/MZGG01.1.fsa_nt.gz
gunzip MZGG01.1.fsa_nt.gz
mv MZGG01.1.fsa_nt ofavPrada.fasta

# adding symbiont transcriptomes (for zoox quantification and typing):
unzip symABCD.fasta.zip
cat ofavPrada.fasta symABCD.fasta > ofavPrada_symABCD.fasta

# setting up  shortcuts to genome files for ease of coding (needs to be done upon every new login!) 
GENOME_FASTA=ofavPrada_symABCD.fasta  
GENOME_DICT=ofavPrada_symABCD.dict 

# creating genome indexes (for bowtie2 and samtools):
bowtie2-build $GENOME_FASTA $GENOME_FASTA &
samtools faidx $GENOME_FASTA &

#-------------------
# mapping reads 

GENOME_FASTA=ofavPrada_symABCD.fasta  
2bRAD_bowtie2_launch.pl '\.fastq$' $GENOME_FASTA > bt2
# execute all commands in file bt2 (recommended: use LAUNCHER module if you are on a cluster: https://github.com/TACC/launcher )

ls *.bt2.sam > sams
cat sams | wc -l  
# should be 202 

# ------------- genotyping zooxanthellae and calculating their abundances
# using ~2Mb contig as a host reference; look up contig lengths in the header of any sam file

zooxType.pl host="MZGG01000005.1" >zooxCounts.txt

#------------------ extracting O.fav alignments

for S in `ls *.bt2.sam`;
do
NNAME=`echo $S | perl -pe 's/\.bt2\.sam/\.ofav\.sam/'`;
echo $NNAME;
grep -v "chr11|chr12|chr13|chr14" $S >$NNAME;
done

# ------------- making bam files

export GENOME_FASTA=ofavPrada_symABCD.fasta

ls *ofav.sam > sams
cat sams | perl -pe 's/(\S+)\.ofav\.sam/samtools import \$GENOME_FASTA $1\.ofav\.sam $1\.unsorted\.bam && samtools sort -o $1\.sorted\.bam $1\.unsorted\.bam && samtools index $1\.sorted.bam $1\.bam.bai && mv $1\.sorted.bam $1\.bam/' >s2b

# execute all commands in s2b file

rm *sorted*
ls *fastq.bam > bams
cat bams | wc -l  
# should be 202 bam files


#----------- assessing base qualities and coverage depth

# listing files for ANGSD to work on:
ls *.bam > bams

# angsd settings:
# -minMapQ 20 : only highly unique mappings (prob of erroneous mapping = 1%)
# -baq 1 : realign around indels (not terribly relevant for 2bRAD reads mapped with --local option) 
# -maxDepth : highest total depth (sum over all samples) to assess; set to 10x number of samples
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -maxDepth 1200"

# T O   D O : 
TODO="-doQsDist 1 -doDepth 1 -doCounts 1 -dumpCounts 2"

# in the following line, -r argument is one chromosome or contig to work with (no need to do this for whole genome as long as the chosen chromosome or contig is long enough)
# (look up lengths of your contigs in the header of *.sam files if you need)
angsd -b bams -r MZGG01000012.1 -GL 1 $FILTERS $TODO -P 1 -out dd 

# summarizing results (using cannibalized Matteo Fumagalli's script)
Rscript ~/bin/plotQC.R dd > qranks

# percentages of sites with coverage >5x in each sample, from worst to best:
cat qranks

# scp dd.pdf to laptop to view more details. 

# use nano to manually remove poorly covered sample(s) from bams


# ----- IBS with ANGSD

# F I L T E R S :
# (ALWAYS record your filter settings and explore different combinations to confirm that results are robust. )
# Suggested filters :
# -snp_pval 1e-5 : high confidence that the SNP is not just sequencing error 
# -minMaf 0.05 : only common SNPs, with allele frequency 0.05 or more.
# set minInd to 75-80% of total number of samples
# also adding  filters against very badly non-HWE sites (such as, all calls are heterozygotes => lumped paralog situation) and sites with really bad strand bias:
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -minInd 150 -snp_pval 1e-5 -minMaf 0.05"

# T O   D O : 
# -GL 1 : samtools likelihood model
# -doGlf 2 : output beagle format (for admixture)
# -doGeno 8 : bgenotype likelihoods format for ngsLD
# -makeMatrix 1 -doIBS 1 -doCov 1 : identity-by-state and covariance matrices based on single-read resampling (robust to variation in coverage across samples)
TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGeno 8 -doVcf 1 -doPost 1 -doGlf 2"

angsd -b bams -GL 1 $FILTERS $TODO -P 1 -out ibs05

# how many SNPs?
zcat ibs05.mafs.gz | wc -l

# scp ibs05.ibsMat and bams to laptop, use step1_IBS.R to analyze

# ---------- PCoA, ADMIXTURE

# note: this analysis must use bams without clonal repeats, list them in bams_noclones
# (script step1_IBS.R will produce such list)

# re-running the same after removing clones (make sure to set FILTERS and TODO variables as above except minInd - lower that one to ~80% of number of bams_noclones) 
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -minInd 80 -snp_pval 1e-5 -minMaf 0.05"
TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGeno 8 -doVcf 1 -doPost 1 -doGlf 2"
angsd -b bams_noclones -GL 1 $FILTERS $TODO -P 1 -out ofav_nc

# NgsAdmix for K from 2 to 6
for K in `seq 2 6` ; 
do 
NGSadmix -likes ofav_nc.beagle.gz -K $K -P 10 -o of_k${K};
done

# you will need a tab-delimited file called inds2pops (included): the columns are:
[bam file name]	[population it corresponds to]

# scp *.qopt to laptop; use admixturePlotting_v4.R to plot results

# for PCoA, use the newly generated ofav_nc.ibsMat and script angsd_ibs_pcs.R 